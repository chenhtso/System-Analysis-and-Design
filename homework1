作业 
1.简单题
（1）软件工程的定义
答：IEEE：软件工程是（1）将系统化的、规范的、可度量的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件；（2）在（1）中所述方法的研究。
（2）阅读经典名著“人月神话”等资料，解释 software crisis、COCOMO 模型。
答：software crisis,软件危机（英语：Software Crisis）是早期计算机科学的一个术语，是指在软件开发及维护的过程中所遇到的一系列严重问题，
这些问题皆可能导致软件产品的寿命缩短、甚至夭折。软件开发是一项高难度、高风险的活动，由于它的高失败率，故有所谓“软件危机”之说。
软件危机的本源是复杂、期望和改变。这个术语用来描述正急遽增加之电脑的力量带来的冲击和可能要处理的问题的复杂性。从本质上来说，它谈到了写出正确、可理解、
可验证的计算机程序的困难。
COCOMO模型，构造性成本模型（COCOMO，英文全称为Constructive Cost Model）是由巴里·勃姆（Barry Boehm）提出的一种软件成本估算方法。
这种模型使用一种基本的回归分析公式，使用从项目历史和现状中的某些特征作为参数来进行计算。
（3）软件生命周期。
答 ：软件生命周期（Software Development LifeCycle）是指软件的产生直到成熟的全部过程。
生命周期是事物发展的客观规律，软件同样存在生命周期。早期的软件生命周期往往是说“软件从计划、需求开始，经历分析设计、实现、部署、维护，直到最后逐渐消亡的”。
这是受到了第一个软件生命周期模型---瀑布模型影响，上述语句实质上简要的描述了瀑布型生命周期。 现在的软件生命周期不再只考虑瀑布型生命周期，
另外常见的软件生命周期模型有原型模型、螺旋模型、迭代模型。所以现在的软件生命周期说明应当不再包括瀑布型生命周期中的典型阶段。因此，现在对软件生命周期及
软件生命周期模型采用如下定义：
软件生命周期是指软件的产生直到成熟的全部过程。
软件生命周期模型是指人们为开发更好的软件而归纳总结的软件生命周期的典型实践参考。
最近几年来，给软件生命周期带来最多活力的是敏捷软件开发，使得这个领域呈现出勃勃生机，出现了一些更好响应变化、迎接竞争的生命周期模型。
敏捷软件开发明确对生命周期模型提出了要求：短迭代开发。迭代模型的历史可以追溯到上世纪50年代，但以往的迭代模型并没有对迭代周期长度提出要求。而在敏捷软件开发
中，迭代周期长度一般不超过2个月，而常见的迭代周期是2周到4周，因此可以称之为“短迭代”。
有些敏捷软件开发在主开发过程前安排有预研或计划或架构或需求阶段等等，在主开发过程后安排有系统集成测试或验收测试或试运行等等，这样做并不违反敏捷开发原则，
但其主开发过程应当采用短迭代开发，而且主开发过程的工期应当占有显著的比例，形成多个短迭代。
敏捷开发讲究固定的节奏，建议按照固定的节奏开发，所以短迭代的周期长度在开始选定之后，一般不作改变。同样的原因，敏捷迭代与迭代之间一般不安排缓冲期，
上个迭代未完成的内容放到下个迭代中进行处理。
敏捷开发迭代与瀑布生命周期的阶段是不同的。瀑布型中需求分析阶段的产物一般是需求规格说明书，不同阶段的产物是不同的；而敏捷开发迭代的产物是软件本身，
前期迭代的产物也许不完整，但各个敏捷开发迭代的产物是一致的、逐步改进完善的软件本身。
（4）按照 SWEBok 的 KA 划分，本课程关注哪些 KA 或 知识领域？
答 ：ACM与IEEE Computer Society联合修定的SWEBOK（Software Engineering Body of Knowledge）提到，软件工程领域中的核心知识包括：
软件需求（Software requirements）
软件设计（Software design）
软件建构（Software construction）
软件测试（Software test）
软件维护与更新（Software maintenance）
软件构型管理（Software Configuration Management, SCM）
软件工程管理（Software Engineering Management）
软件开发过程（Software Development Process）
软件工程工具与方法（Software Engineering Tools and methods）
软件质量（Software Quality）
本课程关注软件设计、软件测试、软件构型管理、软件工程管理、软件开发过程、软件质量等核心知识。
（5）解释 CMMI 的五个级别。例如：Level 1 - Initial：无序，自发生产模式。
答 ：CMMI的五个级别分别为：
Level-1 Initial 无序
Level-2 Managed 已管理
Level-3 Defined 已定义
Level-4 Quantitatively Managed 已量化地管理
Level-5 Optimizing 优化中，对其解释如下：
1．无序
软件过程是无序的，有时甚至是混乱的，对过程几乎没有定义，成功取决于个人努力。管理是反应式的。
2．已管理级
建立了基本的项目管理过程来跟踪费用、进度和功能特性。制定了必要的过程纪律，能重复早先类似应用项目取得的成功经验。
3.已定义级
已将软件管理和工程两方面的过程文档化、标准化，并综合成该组织的标准软件过程。所有项目均使用经批准、剪裁的标准软件过程来开发和维护软件，
软件产品的生产在整个软件过程是可见的。
4.量化管理级
分析对软件过程和产品质量的详细度量数据，对软件过程和产品都有定量的理解与控制。管理有一个作出结论的客观依据，管理能够在定量的范围内预测性能。
5.优化管理级
过程的量化反馈和先进的新思想、新技术促使过程持续不断改进。
（6）用自己语言简述 SWEBok 或 CMMI （约200字）
答 ：CMMI全称是Capability Maturity Model Integration，即能力成熟度模型集成（也有称为：软件能力成熟度集成模型）。
其目的是帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时地、不超预算地开发出高质量的软件。其所依据的想法是：
只要集中精力持续努力去建立有效的软件工程过程的基础结构，不断进行管理的实践和过程的改进，就可以克服软件开发中的困难。CMMI为改进一个组织的各种过程提供了
一个单一的集成化框架，新的集成模型框架消除了各个模型的不一致性，减少了模型间的重复，增加透明度和理解，建立了一个自动的、可扩展的框架。因而能够从总体上
改进组织的质量和效率。CMMI主要关注点就是成本效益、明确重点、过程集中和灵活性四个方面。
2、解释 PSP 各项指标及技能要求：
阅读《现代软件工程》的 PSP: Personal Software Process 章节。 
http://www.cnblogs.com/xinz/archive/2011/11/27/2265425.html
按表格 PSP 2.1， 了解一个软件工程师在接到一个任务之后要做什么，需要哪些技能，解释你打算如何统计每项数据？ （期末考核，每人按开发阶段提交这个表）
答 ：
Planning
·         Estimate
Development
·         Analysis
·         Design Spec
·         Design Review
·         Coding Standard
·         Design
·         Coding
·         Code Review
·         Test
 
 
Record Time Spent
Test Report
Size Measurement
Postmortem
Process Improvement Plan
计划
·         估计这个任务需要多少时间
开发
·         分析需求
·         生成设计文档
·         设计复审 (和同事审核设计文档)
·         代码规范 (为目前的开发制定合适的规范)
·         具体设计
·         具体编码
·         代码复审
·         测试（包括自我测试，修改代码，提交修改）
记录时间花费
测试报告
计算工作量
事后总结
提出过程改进计划
 
统计数据量的方法：将每个工作部分所花费的时间小时数进行统计计算，以便在之后作出总结和优化。
